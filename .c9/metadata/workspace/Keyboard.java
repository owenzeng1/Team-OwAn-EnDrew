{"changed":true,"filter":false,"title":"Keyboard.java","tooltip":"/Keyboard.java","value":"package cs1;\n\n//********************************************************************\n//  Keyboard.java       Author: Lewis and Loftus\n//\n//  Facilitates keyboard input by abstracting details about input\n//  parsing, conversions, and exception handling.\n//********************************************************************\n\nimport java.io.*;\nimport java.util.*;\n\npublic class Keyboard \n{\n   //*************  Error Handling Section  **************************\n\n   private static boolean printErrors = true;\n   private static int errorCount = 0;\n\n   //-----------------------------------------------------------------\n   //  Returns the current error count.\n   //-----------------------------------------------------------------\n   public static int getErrorCount()\n   {\n      return errorCount;\n   }\n\n   //-----------------------------------------------------------------\n   //  Resets the current error count to zero.\n   //-----------------------------------------------------------------\n   public static void resetErrorCount (int count)\n   {\n      errorCount = 0;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a boolean indicating whether input errors are\n   //  currently printed to standard output.\n   //-----------------------------------------------------------------\n   public static boolean getPrintErrors()\n   {\n      return printErrors;\n   }\n\n   //-----------------------------------------------------------------\n   //  Sets a boolean indicating whether input errors are to be\n   //  printed to standard output.\n   //-----------------------------------------------------------------\n   public static void setPrintErrors (boolean flag)\n   {\n      printErrors = flag;\n   }\n\n   //-----------------------------------------------------------------\n   //  Increments the error count and prints the error message if\n   //  appropriate.\n   //-----------------------------------------------------------------\n   private static void error (String str)\n   {\n      errorCount++;\n      if (printErrors) \n         System.out.println (str);\n   }\n\n   //*************  Tokenized Input Stream Section  ******************\n\n   private static String current_token = null;\n   private static StringTokenizer reader;\n\n   private static BufferedReader in = new BufferedReader \n      (new InputStreamReader(System.in));\n\n\n   //-----------------------------------------------------------------\n   //  Gets the next input token assuming it may be on subsequent\n   //  input lines.\n   //-----------------------------------------------------------------\n   private static String getNextToken() \n   {\n      return getNextToken (true);\n   }\n\n   //-----------------------------------------------------------------\n   //  Gets the next input token, which may already have been read.\n   //-----------------------------------------------------------------\n   private static String getNextToken (boolean skip) \n   {\n      String token;\n\n      if (current_token == null)\n         token = getNextInputToken (skip);\n      else\n      {\n         token = current_token;\n         current_token = null;\n      }\n\n      return token;\n   }\n\n   //-----------------------------------------------------------------\n   //  Gets the next token from the input, which may come from the\n   //  current input line or a subsequent one. The parameter\n   //  determines if subsequent lines are used.\n   //-----------------------------------------------------------------\n   private static String getNextInputToken (boolean skip) \n   {\n      final String delimiters = \" \\t\\n\\r\\f\";\n      String token = null;\n\n      try \n      {\n         if (reader == null) \n            reader = new StringTokenizer \n               (in.readLine(), delimiters, true);\n\n         while (token == null || \n                ((delimiters.indexOf (token) >= 0) && skip))\n         {\n            while (!reader.hasMoreTokens()) \n               reader = new StringTokenizer \n                  (in.readLine(), delimiters,true);\n         \n            token = reader.nextToken();\n         }\n      }\n      catch (Exception exception) \n      {\n         token = null;\n      }\n\n      return token;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns true if there are no more tokens to read on the\n   //  current input line.\n   //-----------------------------------------------------------------\n   public static boolean endOfLine() \n   {\n      return !reader.hasMoreTokens();\n   }\n\n   //*************  Reading Section  *********************************\n\n   //-----------------------------------------------------------------\n   //  Returns a string read from standard input.\n   //-----------------------------------------------------------------\n   public static String readString() \n   {\n      String str;\n\n      try \n      {\n         str = getNextToken(false);\n         while (! endOfLine())\n         {\n            str = str + getNextToken(false);\n         }\n      }\n      catch (Exception exception) \n      {\n         error (\"Error reading String data, null value returned.\");\n         str = null;\n      }\n      return str;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a space-delimited substring (a word) read from\n   //  standard input.\n   //-----------------------------------------------------------------\n   public static String readWord() \n   {\n      String token;\n      try \n      {\n         token = getNextToken();\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading String data, null value returned.\");\n         token = null;\n      }\n      return token;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a boolean read from standard input.\n   //-----------------------------------------------------------------\n   public static boolean readBoolean() \n   {\n      String token = getNextToken();\n      boolean bool;\n      try\n      {\n         if (token.toLowerCase().equals(\"true\")) \n            bool = true;\n         else if (token.toLowerCase().equals(\"false\")) \n            bool = false;\n         else \n         {\n            error (\"Error reading boolean data, false value returned.\");\n            bool = false;\n         }\n      }\n      catch (Exception exception)\n      {\n         error (\"Error reading boolean data, false value returned.\");\n         bool = false;\n      }\n      return bool;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a character read from standard input.\n   //-----------------------------------------------------------------\n   public static char readChar() \n   {\n      String token = getNextToken(false);\n      char value;\n      try \n      {\n         if (token.length() > 1)\n         {\n            current_token = token.substring (1, token.length());\n         } else\n            current_token = null;\n\n         value = token.charAt (0);\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading char data, MIN_VALUE value returned.\");\n         value = Character.MIN_VALUE;\n      }\n\n      return value;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns an integer read from standard input.\n   //-----------------------------------------------------------------\n   public static int readInt() \n   {\n      String token = getNextToken();\n      int value;\n      try \n      {\n         value = Integer.parseInt (token);\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading int data, MIN_VALUE value returned.\");\n         value = Integer.MIN_VALUE;\n      }\n      return value;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a long integer read from standard input.\n   //-----------------------------------------------------------------\n   public static long readLong() \n   {\n      String token = getNextToken();\n      long value;\n      try \n      {\n         value = Long.parseLong (token);\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading long data, MIN_VALUE value returned.\");\n         value = Long.MIN_VALUE;\n      }\n      return value;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a float read from standard input.\n   //-----------------------------------------------------------------\n   public static float readFloat() \n   {\n      String token = getNextToken();\n      float value;\n      try \n      {\n         value = (new Float(token)).floatValue();\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading float data, NaN value returned.\");\n         value = Float.NaN;\n      }\n      return value;\n   }\n\n   //-----------------------------------------------------------------\n   //  Returns a double read from standard input.\n   //-----------------------------------------------------------------\n   public static double readDouble() \n   {\n      String token = getNextToken();\n      double value;\n      try \n      {\n         value = (new Double(token)).doubleValue();\n      } \n      catch (Exception exception) \n      {\n         error (\"Error reading double data, NaN value returned.\");\n         value = Double.NaN;\n      }\n      return value;\n   }\n}\n","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":316,"column":0},"action":"insert","lines":["package cs1;","","//********************************************************************","//  Keyboard.java       Author: Lewis and Loftus","//","//  Facilitates keyboard input by abstracting details about input","//  parsing, conversions, and exception handling.","//********************************************************************","","import java.io.*;","import java.util.*;","","public class Keyboard ","{","   //*************  Error Handling Section  **************************","","   private static boolean printErrors = true;","   private static int errorCount = 0;","","   //-----------------------------------------------------------------","   //  Returns the current error count.","   //-----------------------------------------------------------------","   public static int getErrorCount()","   {","      return errorCount;","   }","","   //-----------------------------------------------------------------","   //  Resets the current error count to zero.","   //-----------------------------------------------------------------","   public static void resetErrorCount (int count)","   {","      errorCount = 0;","   }","","   //-----------------------------------------------------------------","   //  Returns a boolean indicating whether input errors are","   //  currently printed to standard output.","   //-----------------------------------------------------------------","   public static boolean getPrintErrors()","   {","      return printErrors;","   }","","   //-----------------------------------------------------------------","   //  Sets a boolean indicating whether input errors are to be","   //  printed to standard output.","   //-----------------------------------------------------------------","   public static void setPrintErrors (boolean flag)","   {","      printErrors = flag;","   }","","   //-----------------------------------------------------------------","   //  Increments the error count and prints the error message if","   //  appropriate.","   //-----------------------------------------------------------------","   private static void error (String str)","   {","      errorCount++;","      if (printErrors) ","         System.out.println (str);","   }","","   //*************  Tokenized Input Stream Section  ******************","","   private static String current_token = null;","   private static StringTokenizer reader;","","   private static BufferedReader in = new BufferedReader ","      (new InputStreamReader(System.in));","","","   //-----------------------------------------------------------------","   //  Gets the next input token assuming it may be on subsequent","   //  input lines.","   //-----------------------------------------------------------------","   private static String getNextToken() ","   {","      return getNextToken (true);","   }","","   //-----------------------------------------------------------------","   //  Gets the next input token, which may already have been read.","   //-----------------------------------------------------------------","   private static String getNextToken (boolean skip) ","   {","      String token;","","      if (current_token == null)","         token = getNextInputToken (skip);","      else","      {","         token = current_token;","         current_token = null;","      }","","      return token;","   }","","   //-----------------------------------------------------------------","   //  Gets the next token from the input, which may come from the","   //  current input line or a subsequent one. The parameter","   //  determines if subsequent lines are used.","   //-----------------------------------------------------------------","   private static String getNextInputToken (boolean skip) ","   {","      final String delimiters = \" \\t\\n\\r\\f\";","      String token = null;","","      try ","      {","         if (reader == null) ","            reader = new StringTokenizer ","               (in.readLine(), delimiters, true);","","         while (token == null || ","                ((delimiters.indexOf (token) >= 0) && skip))","         {","            while (!reader.hasMoreTokens()) ","               reader = new StringTokenizer ","                  (in.readLine(), delimiters,true);","         ","            token = reader.nextToken();","         }","      }","      catch (Exception exception) ","      {","         token = null;","      }","","      return token;","   }","","   //-----------------------------------------------------------------","   //  Returns true if there are no more tokens to read on the","   //  current input line.","   //-----------------------------------------------------------------","   public static boolean endOfLine() ","   {","      return !reader.hasMoreTokens();","   }","","   //*************  Reading Section  *********************************","","   //-----------------------------------------------------------------","   //  Returns a string read from standard input.","   //-----------------------------------------------------------------","   public static String readString() ","   {","      String str;","","      try ","      {","         str = getNextToken(false);","         while (! endOfLine())","         {","            str = str + getNextToken(false);","         }","      }","      catch (Exception exception) ","      {","         error (\"Error reading String data, null value returned.\");","         str = null;","      }","      return str;","   }","","   //-----------------------------------------------------------------","   //  Returns a space-delimited substring (a word) read from","   //  standard input.","   //-----------------------------------------------------------------","   public static String readWord() ","   {","      String token;","      try ","      {","         token = getNextToken();","      } ","      catch (Exception exception) ","      {","         error (\"Error reading String data, null value returned.\");","         token = null;","      }","      return token;","   }","","   //-----------------------------------------------------------------","   //  Returns a boolean read from standard input.","   //-----------------------------------------------------------------","   public static boolean readBoolean() ","   {","      String token = getNextToken();","      boolean bool;","      try","      {","         if (token.toLowerCase().equals(\"true\")) ","            bool = true;","         else if (token.toLowerCase().equals(\"false\")) ","            bool = false;","         else ","         {","            error (\"Error reading boolean data, false value returned.\");","            bool = false;","         }","      }","      catch (Exception exception)","      {","         error (\"Error reading boolean data, false value returned.\");","         bool = false;","      }","      return bool;","   }","","   //-----------------------------------------------------------------","   //  Returns a character read from standard input.","   //-----------------------------------------------------------------","   public static char readChar() ","   {","      String token = getNextToken(false);","      char value;","      try ","      {","         if (token.length() > 1)","         {","            current_token = token.substring (1, token.length());","         } else","            current_token = null;","","         value = token.charAt (0);","      } ","      catch (Exception exception) ","      {","         error (\"Error reading char data, MIN_VALUE value returned.\");","         value = Character.MIN_VALUE;","      }","","      return value;","   }","","   //-----------------------------------------------------------------","   //  Returns an integer read from standard input.","   //-----------------------------------------------------------------","   public static int readInt() ","   {","      String token = getNextToken();","      int value;","      try ","      {","         value = Integer.parseInt (token);","      } ","      catch (Exception exception) ","      {","         error (\"Error reading int data, MIN_VALUE value returned.\");","         value = Integer.MIN_VALUE;","      }","      return value;","   }","","   //-----------------------------------------------------------------","   //  Returns a long integer read from standard input.","   //-----------------------------------------------------------------","   public static long readLong() ","   {","      String token = getNextToken();","      long value;","      try ","      {","         value = Long.parseLong (token);","      } ","      catch (Exception exception) ","      {","         error (\"Error reading long data, MIN_VALUE value returned.\");","         value = Long.MIN_VALUE;","      }","      return value;","   }","","   //-----------------------------------------------------------------","   //  Returns a float read from standard input.","   //-----------------------------------------------------------------","   public static float readFloat() ","   {","      String token = getNextToken();","      float value;","      try ","      {","         value = (new Float(token)).floatValue();","      } ","      catch (Exception exception) ","      {","         error (\"Error reading float data, NaN value returned.\");","         value = Float.NaN;","      }","      return value;","   }","","   //-----------------------------------------------------------------","   //  Returns a double read from standard input.","   //-----------------------------------------------------------------","   public static double readDouble() ","   {","      String token = getNextToken();","      double value;","      try ","      {","         value = (new Double(token)).doubleValue();","      } ","      catch (Exception exception) ","      {","         error (\"Error reading double data, NaN value returned.\");","         value = Double.NaN;","      }","      return value;","   }","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":316,"column":0},"end":{"row":316,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1452619635122}